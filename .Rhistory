'SES')))
#Stress induced losses c17
compose(c('Lost_Root_length', 'Lost_Chlorophyll_A',
'SES'))
a <- append(a, paste(c('Lost_Root_length', 'Lost_Chlorophyll_A',
'SES'), collapse = ', '))
b <- append(b, compose(c('Lost_Root_length', 'Lost_Chlorophyll_A',
'SES')))
#Biomass and chlorophyll C18
compose(c('Lost_Root_weight', 'Lost_Shoot_weight',
'Lost_Chlorophyll_A', 'Lost_Chlorophyll_B'))
a <- append(a, paste(c('Lost_Root_weight', 'Lost_Shoot_weight',
'Lost_Chlorophyll_A', 'Lost_Chlorophyll_B'), collapse = ', '))
b <- append(b, compose(c('Lost_Root_weight', 'Lost_Shoot_weight',
'Lost_Chlorophyll_A', 'Lost_Chlorophyll_B')))
odt <- data.frame(a, b)
colnames(odt) <- c('t1', 't2')
o2 <- read.csv('2.csv')
o3 <- read.csv('3.csv')
o4 <- read.csv('4.csv')
o5 <- read.csv('5.csv')
o6 <- read.csv('6.csv')
o2 <- o2[order(o2$t2, decreasing = TRUE),]
o3 <- o3[order(o3$t2, decreasing = TRUE),]
o4 <- o4[order(o4$t2, decreasing = TRUE),]
o5 <- o5[order(o5$t2, decreasing = TRUE),]
o6 <- o6[order(o6$t2, decreasing = TRUE),]
odt <- dplyr::bind_rows(odt, o2[1:21,], o2[1:10,], o4[1:10,], o5[1:10,], o6[1:10,])
colnames(odt) <- c('Trait combination', 'Explained variance')
odt <- odt[!duplicated(odt$`Trait combination`)]
odt <- odt[!duplicated(odt$`Trait combination`),]
sum(duplicated(o2))
View(odt)
write.csv('Composite_trait_combinations.csv',odt)
write.csv('Composite_trait_combinations.csv', odt)
write.csv(odt, 'Composite_trait_combinations.csv')
write_csv(odt, 'Composite_trait_combinations.csv')
write_csv(odt, 'Composite_trait_combinations.csv')
odt$`Trait combination`
strsplit('abc','b')
strsplit(odt$`Trait combination`, ', ')
for (i in strsplit(odt$`Trait combination`, ', ')) { print(i)}
strsplit(odt$`Trait combination`, ', ')[[1]]
for (i in 1:68) {
strsplit(odt$`Trait combination`, ', ')[[i]]
}
for (i in 1:68) {
print(strsplit(odt$`Trait combination`, ', ')[[i]])
}
print(compose(strsplit(odt$`Trait combination`, ', ')[[i]]))
for (i in 1:68) {
print(compose(strsplit(odt$`Trait combination`, ', ')[[i]]))
}
x <- data.frame()
for (i in 1:68) {
x <- dplyr::bind_cols(forge(strsplit(odt$`Trait combination`, ', ')[[i]]))
}
forge <- function(traits) {
wdf <- df[c('accession_name', traits)]
tdf <- na.omit(wdf[c(traits)])
mat <- data.matrix(tdf)
pca <- prcomp(mat, scale. = TRUE)
#plot(pca$x[,1], pca$x[,2])
pca.var <- pca$sdev^2
pca.var <- round(pca.var/sum(pca.var)*100, 1)
#barplot(pca.var[1:5], main = 'Scree Plot', xlab = 'Principal Component',
#        ylab = 'Percent Variation')
pca$x[,1]
}
x <- data.frame()
for (i in 1:68) {
x <- dplyr::bind_cols(forge(strsplit(odt$`Trait combination`, ', ')[[i]]))
}
View(x)
x <- data.frame()
for (i in 1:68) {
x <- dplyr::bind_cols(x, forge(strsplit(odt$`Trait combination`, ', ')[[i]]))
}
wdf <- df[c('accession_name', traits)]
traits <- c('Width_WO_husk', 'Height_WO_husk', 'Seed_Weight')
wdf <- df[c('accession_name', traits)]
wdf
adf <- wdf[na.omit(wdf)]
adf <- na.omit(wdf)
View(adf)
adf <- dplyr::bind_cols(adf$accession_name, pca$x[,1])
View(adf)
adf
dim(adf)
dim(pca$x[,1])
dim(pca$x[1,])
typeof(pca$x[,1])
length(pca$x[,1])
tdf <- na.omit(wdf[c(traits)])
mat <- data.matrix(tdf)
pca <- prcomp(mat, scale. = TRUE)
adf <- dplyr::bind_cols(adf$accession_name, pca$x[,1])
View(adf)
?merge
cdf <- merge(cdf, x, by = 'accession_name', all = TRUE)
cdf <- forge(strsplit(odt$`Trait combination`, ', ')[[1]])
names(cdf) <- cdf('accession_name', sprintf('C%d', 1))
for (i in 2:68) {
x <- forge(strsplit(odt$`Trait combination`, ', ')[[i]])
names(x) <- c('accession_name', sprintf('C%d', i))
cdf <- merge(cdf, x, by = 'accession_name', all = TRUE)
}
cdf <- forge(strsplit(odt$`Trait combination`, ', ')[[1]])
names(cdf) <- cdf('accession_name', sprintf('C%d', 1))
for (i in 2:68) {
x <- forge(strsplit(odt$`Trait combination`, ', ')[[i]])
names(x) <- c('accession_name', sprintf('C%d', i))
cdf <- merge(cdf, x, by = `accession_name`, all = TRUE)
}
cdf <- forge(strsplit(odt$`Trait combination`, ', ')[[1]])
names(cdf) <- cdf('accession_name', sprintf('C%d', 1))
forge <- function(traits) {
wdf <- df[c('accession_name', traits)]
adf <- na.omit(wdf)
tdf <- na.omit(wdf[c(traits)])
mat <- data.matrix(tdf)
pca <- prcomp(mat, scale. = TRUE)
#plot(pca$x[,1], pca$x[,2])
pca.var <- pca$sdev^2
pca.var <- round(pca.var/sum(pca.var)*100, 1)
#barplot(pca.var[1:5], main = 'Scree Plot', xlab = 'Principal Component',
#        ylab = 'Percent Variation')
adf <- dplyr::bind_cols(adf$accession_name, pca$x[,1])
adf
}
cdf <- forge(strsplit(odt$`Trait combination`, ', ')[[1]])
names(cdf) <- cdf('accession_name', sprintf('C%d', 1))
for (i in 2:68) {
x <- forge(strsplit(odt$`Trait combination`, ', ')[[i]])
names(x) <- c('accession_name', sprintf('C%d', i))
cdf <- merge(cdf, x, by = 'accession_name', all = TRUE)
}
View(cdf)
cdf <- forge(strsplit(odt$`Trait combination`, ', ')[[1]])
names(cdf) <- cdf('accession_name', sprintf('C%d', 1))
cdf <- forge(strsplit(odt$`Trait combination`, ', ')[[1]])
names(cdf) <- c('accession_name', sprintf('C%d', 1))
View(cdf)
for (i in 2:68) {
x <- forge(strsplit(odt$`Trait combination`, ', ')[[i]])
names(x) <- c('accession_name', sprintf('C%d', i))
cdf <- merge(cdf, x, by = 'accession_name', all = TRUE)
}
View(cdf)
write_csv(cdf, '68composite.csv')
write.table(cdf, '68composite.csv')
write.table(cdf, '68composite.txt')
?write.table
write.table(cdf, '68composite.txt', row.names = FALSE)
write.table(cdf, '68composite.txt', row.names = FALSE, sep = '\t')
View(df)
which(is.na(myY))
myY <- read.table('../../Data/39transformed_WF2.txt', header = TRUE)
which(is.na(df))
which(is.na(df[,2]))
which(!is.na(df[,2]))
myY[1,]
df[,2]
dplyr::bind_cols(df[,2], df[,3])
df[,1]
x <- df[,1]
names(x)
install.packages('SNPassoc')
install.packages('SNPassoc')
install.packages('SNPassoc')
install.packages('SNPassoc')
library(SNPassoc)
# Next steps may be very time consuming. So they are not executed
data(HapMap)
View(HapMap)
# Next steps may be very time consuming. So they are not executed
data(HapMap)
myDat<-setupSNP(HapMap, colSNPs=3:9307, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
View(myDat)
myDat<-setupSNP(HapMap, colSNPs=3:1000, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
resHapMap<-scanWGassociation(group~1, data=myDat, model="log")
resHapMap<-WGassociation(group~1, data=myDat, model="log")
View(resHapMap)
permTest(resHapMap, 'minimum')
?WGassociation
?scanWGassociation
resHapMap<-scanWGassociation(group~1, data=myDat, model="log", nperm = 200)
library(devtools)
install.packages('devtools')
install.packages("devtools")
library(devtools)
install_githuib("isglobal-brge/SNPassoc")
devtools::install_githuib("isglobal-brge/SNPassoc")
install_github("isglobal-brge/SNPassoc")
install_github("isglobal-brge/SNPassoc")
install_github("isglobal-brge/SNPassoc")
iinstall.packages('digest')
install.packages('digest')
install.packages("digest")
install_github("isglobal-brge/SNPassoc")
library(devtools)
install_github("isglobal-brge/SNPassoc")
install.packages("biomaRt")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(devtools)
#install_github("isglobal-brge/SNPassoc")
library(SNPassoc)
# Next steps may be very time consuming. So they are not executed
data(HapMap)
rm(list = ls())
# Next steps may be very time consuming. So they are not executed
data(HapMap)
View(HapMap)
View(HapMap.SNPs.pos)
myDat<-setupSNP(HapMap, colSNPs=3:1000, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
myDat<-setupSNP(HapMap, colSNPs=3:9307, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
resHapMap<-scanWGassociation(group~1, data=myDat, model="log", nperm = 200)
permTest(resHapMap, 'minimum')
?scanWGassociation
View(HapMap)
View(HapMap.SNPs.pos)
View(myDat)
View(HapMap)
View(HapMap)
View(HapMap.SNPs.pos)
HapMap$group = c(1:120)
View(HapMap)
myDat<-setupSNP(HapMap, colSNPs=3:9307, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
resHapMap<-scanWGassociation(group~1, data=myDat, model="log", nperm = 200)
HapMap$group = as.factor(1:120)
myDat<-setupSNP(HapMap, colSNPs=3:9307, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
resHapMap<-scanWGassociation(group~1, data=myDat, model="log", nperm = 200)
View(HapMap)
HapMap$group = as.factor(1)
myDat<-setupSNP(HapMap, colSNPs=3:9307, sort = TRUE,
info=HapMap.SNPs.pos, sep="")
resHapMap<-scanWGassociation(group~1, data=myDat, model="log", nperm = 200)
View(myDat)
source("http://zzlab.net/GAPIT/GAPIT.library.R")
source("http://zzlab.net/GAPIT/gapit_functions.txt")
pca <- read.csv('GAPIT.PCA.csv')
pca
t(pca)
View(t(pca))
x <- t(pca[2:4])
x
colnames(x) <- pca[1]
colnames(x) <- pca[,1]
x
View(x)
x <- t(pca[2:4])
colnames(x) <- pca[,1]
x
pca[,1]
length(pca[,1])
typeof(pca[,1])
?read.csv
?read_csv
library(tidyverse)
?read_csv
pca[order(pca$PC2)]
pca[order(pca$PC2),]
?sapply
sapply(pca, max)
sapply(pca, transform)
?transform
sapply(pca, sample)
View(pca)
str_replace('abc', 'b')
str_replace('abc', 'b', '.')
write_csv(c(1,2,3), 'abc')
write.table(c(1,2,3))
write.table(c(1,5,3))
write.table('abc', c(1,5,3))
write.table(c(1,5,3), 'abc')
write.table(c(1,5,3), 'abc', col.names = FALSE)
write.table(c(1,5,3), 'abc', col.names = FALSE, row.names = FALSE)
file
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", '.')
str_extract("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", '.')
str_split_fixed("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", '.')
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", '.')
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", '.*.')
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", '\.')
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", "\.")
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", "\..")
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", "\\.")
str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", "\\.")[3]
unlist(str_split("GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv", "\\."))[3]
colnames(pca)
colnames(pca) <- c('a', 'b', 'c', 'd+')
colnames(pca)
apply(colnames(pca), str_replace, pattern = '+', replacement = '')
lapply(colnames(pca), str_replace, pattern = '+', replacement = '')
apply(colnames(pca), function(x) str_replace(x, '+', ''))
apply(colnames(pca), function(x) str_replace(x, '+', ''))
lapply(colnames(pca), function(x) str_replace(x, '+', ''))
apply(colnames(pca), tolower)
apply(unlist(colnames(pca)),)
apply(list(colnames(pca),)
colnames(pca)
list(colnames(pca))
str_replace(colnames(pca), '+', '.')
s\apply(colnames(pca), tolower)
sapply(colnames(pca), tolower)
sapply(colnames(pca), str_replace, '+', '')
sapply(colnames(pca), str_replace, '+', '.')
sapply(colnames(pca), str_replace, pattern = '+', replacement = '.')
sapply(colnames(pca), function(x) x)
sapply(colnames(pca), function(x) str_replace(x, '+', ''))
sapply(colnames(pca), function(x) str_replace(x, '\\+', ''))
str_replace(colnames(myY)[i2], '+', '.')
str_replace(colnames(pca)[4], '+', '.')
str_replace(colnames(pca)[4], '\\+', '.')
unname(sapply(colnames(pca), function(x) str_replace(x, '\\+', '')))
pca['PC1']
colnames(pc)
colnames(pca)
pca['b']
add_column(pca, c(1:176), .before = 1)
setwd("~/HKT/Cat Does Plant/Test")
myY <- read.table('mdp_traits.txt', head = TRUE)
myGD <- read_csv('mdp_numeric.txt')
myGM <- read_csv('mdp_SNP_information.txt')
myKI <- read.table("KSN.txt", head = FALSE, sep = ',')
myCV <- read.table("Copy of Q_First_Three_Principal_Components.txt", head = TRUE, sep = ',')
myGAPIT <- GAPIT(
Y=myY,
GD=myGD,
GM=myGM,
KI=myKI,
CV=myCV, SNP.MAF = 0.05, model = c("Blink"))
source("http://zzlab.net/GAPIT/GAPIT.library.R")
source("http://zzlab.net/GAPIT/gapit_functions.txt")
myGAPIT <- GAPIT(
Y=myY,
GD=myGD,
GM=myGM,
KI=myKI,
CV=myCV, SNP.MAF = 0.05, model = c("Blink"))
myY <- read.table('mdp_traits.txt', head = TRUE)
myGD <- read.table('mdp_numeric.txt', head = TRUE)
myGM <- read.table('mdp_SNP_information.txt', head = TRUE)
myKI <- read.table("KSN.txt", head = FALSE, sep = ',')
myCV <- read.table("Copy of Q_First_Three_Principal_Components.txt", head = TRUE, sep = ',')
myGAPIT <- GAPIT(
Y=myY,
GD=myGD,
GM=myGM,
KI=myKI,
CV=myCV, SNP.MAF = 0.05, model = c("Blink"))
myY <- read.table('mdp_traits.txt', head = TRUE)
myGD <- read.table('mdp_numeric.txt', head = TRUE)
myGM <- read.table('mdp_SNP_information.txt', head = TRUE)
myKI <- read.table("KSN.txt", head = FALSE)
myCV <- read.table("Copy of Q_First_Three_Principal_Components.txt", head = TRUE)
myGAPIT <- GAPIT(
Y=myY,
GD=myGD,
GM=myGM,
KI=myKI,
CV=myCV, SNP.MAF = 0.05, model = c("Blink"))
View(myGD)
View(myGD)
View(myGM)
typeof(myGD)
typeof(myGM)
myGD[1:5,1:5]
myGM[1:5,1:3]
sapply(c('a','b','c'), str_trunc, width = 2, side = c('left'))
sapply(c('a12','b42','c04'), str_trunc, width = 2, side = c('left'))
sapply(list('a12','b42','c04'), str_trunc, width = 2, side = c('left'))
sapply(c('a12','b42','c04'), function(x) x)
sapply(c('a12','b42','c04'), function(x) str_trunc(x, 2, 'left'))
'abc'[2:3]
sapply(myGM$Chromosome, as.numeric)
as.numeric(myGM$Chromosome)
myGM$Chromosome <- as.numeric(myGM$Chromosome)
myGM
myGM$Chromosome <- as.numeric(myGM$Name)
myGM$Chromosome <- as.numeric(myGM$SNP)
sapply(myGM$SNP, as.numeric)
gsub("([0-9]+).*$", "\\1", 'abcn34')
regmatches
regmatches('fabc24', gregexpr("[[:digit:]]+")
)
gsub("[[:alpha:]]", "", 'abc43')
sapply(myGM$Chromosome, function(x) as.numeric(gsub("[[:alpha:]]", "", x)))
as.data.table()
dir('../')
dir('../')[4:6]
setwd("~/HKT/Cat Does Plant")
library(seqinr)
library(DECIPHER)
gens <- read.fasta('../Data/RAP-DB/IRGSP-1.0_gene_2020-09-09.fasta')
cds <- read.fasta('../Data/RAP-DB/IRGSP-1.0_cds_2020-09-09.fasta')
exlist <- DNAStringSet()
for (codseq in names(cds)) {
pair <- DNAStringSet(c('cds' = unlist(getSequence(cds[codseq], as.string = TRUE)),
'gen' = unlist(getSequence(gens[codseq], as.string = TRUE))),
use.names = TRUE)
pair <- AlignSeqs(pair)
exs <- unlist(str_extract_all(pair$cds, '([A-Z])+'))
names(exs) <- paste0(paste0(codseq, '_exon_'), (1:length(exs)))
exlist <- DNAStringSet(c(exlist, exs))
}
writeXStringSet(exlist, '../Data/RAP-DB/RAPDB all exons.fasta')
# Load the library
library(qqman)
?qqman
vignette('qqman')
?manhattan
?plot
?jpeg
?manhattan
str_split('GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', "\\."))[3]
str_split('GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', "\\.")[3]
unlist(str_split('GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', "\\."))[3]
paste(unlist(str_split('GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', "\\."))[2:3])
paste0(unlist(str_split('GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', "\\."))[2:3])
paste0(unlist(str_split('GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', "\\."))[2:3], collapse = '.')
gens['Os03t0432200']
?seqinr
getSequence('Os03t0432200')
getSequence(gens, 'Os03t0432200')
getSequence(gens)[Os03t0432200]
gens[1:5]
gens["Os01t0100466-00"]
gens["Os03t0432200-00"]
getSequence(gens["Os03t0432200-00"], as.string = TRUE)
WF2sug <- c('GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv',
'GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv', 'GAPIT.Blink.Height_WO_husk.GWAS.Results.csv', 'GAPIT.Blink.Length_WO_husk.GWAS.Results.csv', 'GAPIT.Blink.Lost_Chlorophyll_B.GWAS.Results.csv', 'GAPIT.Blink.Lost_Root_length.GWAS.Results.csv', 'GAPIT.Blink.Lost_Root_thickness.GWAS.Results.csv', 'GAPIT.Blink.Lost_Root_weight.GWAS.Results.csv', 'GAPIT.Blink.Lost_Shoot_length.GWAS.Results.csv', 'GAPIT.Blink.Lost_Shoot_thickness.GWAS.Results.csv', 'GAPIT.Blink.Root_K..GWAS.Results.csv', 'GAPIT.Blink.Root_thickness.GWAS.Results.csv', 'GAPIT.Blink.Seed_density.GWAS.Results.csv', 'GAPIT.Blink.Seed_volume.GWAS.Results.csv', 'GAPIT.Blink.Seed_Weight.GWAS.Results.csv', 'GAPIT.Blink.Shoot_K..GWAS.Results.csv', 'GAPIT.Blink.Shoot_Na..GWAS.Results.csv', 'GAPIT.Blink.Shoot_thickness.GWAS.Results.csv', 'GAPIT.Blink.Stress_Chlorophyll_A.GWAS.Results.csv', 'GAPIT.Blink.Stress_Root_length.GWAS.Results.csv', 'GAPIT.Blink.Stress_Root_Na..GWAS.Results.csv', 'GAPIT.Blink.Stress_Shoot_K..GWAS.Results.csv', 'GAPIT.Blink.Stress_Shoot_length.GWAS.Results.csv', 'GAPIT.CMLM.Chlorophyll_A.GWAS.Results.csv', 'GAPIT.CMLM.Chlorophyll_B.GWAS.Results.csv', 'GAPIT.CMLM.Height_WO_husk.GWAS.Results.csv', 'GAPIT.CMLM.Lost_Root_length.GWAS.Results.csv', 'GAPIT.CMLM.Lost_Root_thickness.GWAS.Results.csv', 'GAPIT.CMLM.Lost_Root_weight.GWAS.Results.csv', 'GAPIT.CMLM.Root_K..GWAS.Results.csv', 'GAPIT.CMLM.Seed_volume.GWAS.Results.csv', 'GAPIT.CMLM.Seed_Weight.GWAS.Results.csv', 'GAPIT.CMLM.Shoot_K..GWAS.Results.csv', 'GAPIT.CMLM.Shoot_thickness.GWAS.Results.csv', 'GAPIT.CMLM.Stress_Root_Na..GWAS.Results.csv', 'GAPIT.CMLM.Stress_Shoot_K..GWAS.Results.csv')
WF2sug <- c('GAPIT.Blink.Chlorophyll_A.GWAS.Results.csv',
'GAPIT.Blink.Chlorophyll_B.GWAS.Results.csv',
'GAPIT.Blink.Height_WO_husk.GWAS.Results.csv',
'GAPIT.Blink.Length_WO_husk.GWAS.Results.csv', 'GAPIT.Blink.Lost_Chlorophyll_B.GWAS.Results.csv', 'GAPIT.Blink.Lost_Root_length.GWAS.Results.csv', 'GAPIT.Blink.Lost_Root_thickness.GWAS.Results.csv', 'GAPIT.Blink.Lost_Root_weight.GWAS.Results.csv', 'GAPIT.Blink.Lost_Shoot_length.GWAS.Results.csv', 'GAPIT.Blink.Lost_Shoot_thickness.GWAS.Results.csv', 'GAPIT.Blink.Root_K..GWAS.Results.csv', 'GAPIT.Blink.Root_thickness.GWAS.Results.csv', 'GAPIT.Blink.Seed_density.GWAS.Results.csv', 'GAPIT.Blink.Seed_volume.GWAS.Results.csv', 'GAPIT.Blink.Seed_Weight.GWAS.Results.csv', 'GAPIT.Blink.Shoot_K..GWAS.Results.csv', 'GAPIT.Blink.Shoot_Na..GWAS.Results.csv', 'GAPIT.Blink.Shoot_thickness.GWAS.Results.csv', 'GAPIT.Blink.Stress_Chlorophyll_A.GWAS.Results.csv', 'GAPIT.Blink.Stress_Root_length.GWAS.Results.csv', 'GAPIT.Blink.Stress_Root_Na..GWAS.Results.csv', 'GAPIT.Blink.Stress_Shoot_K..GWAS.Results.csv', 'GAPIT.Blink.Stress_Shoot_length.GWAS.Results.csv', 'GAPIT.CMLM.Chlorophyll_A.GWAS.Results.csv', 'GAPIT.CMLM.Chlorophyll_B.GWAS.Results.csv', 'GAPIT.CMLM.Height_WO_husk.GWAS.Results.csv', 'GAPIT.CMLM.Lost_Root_length.GWAS.Results.csv', 'GAPIT.CMLM.Lost_Root_thickness.GWAS.Results.csv', 'GAPIT.CMLM.Lost_Root_weight.GWAS.Results.csv', 'GAPIT.CMLM.Root_K..GWAS.Results.csv', 'GAPIT.CMLM.Seed_volume.GWAS.Results.csv', 'GAPIT.CMLM.Seed_Weight.GWAS.Results.csv', 'GAPIT.CMLM.Shoot_K..GWAS.Results.csv', 'GAPIT.CMLM.Shoot_thickness.GWAS.Results.csv', 'GAPIT.CMLM.Stress_Root_Na..GWAS.Results.csv', 'GAPIT.CMLM.Stress_Shoot_K..GWAS.Results.csv')
gens['Os01g0629750']
gens['Os01g0629750-00']
gens['Os01t0629750-00']
getSequence(gens['Os01t0629750-00'], as.string = T)
getSequence(gens['Os12t0467300-01'], as.string = T)
dir('./')
dir('./*.csv')
dir('./\\*.csv')
dir('./\*.csv')
dir('./*.csv')
str_extract(dir('./'), '\\*.csv')
str_extract(dir('./'), '.\\*.csv')
str_extract(dir('./'), '.\\.csv')
str_extract(dir('./'), '\\.*.csv')
str_extract(dir('./'), '.\\.*.csv')
na.omit(str_extract(dir('./'), '.\\.*.csv'))
sapply(str_extract(dir('./'), '.\\.*.csv'), na.omit)
str_extract(dir('./'), '.\\.*.csv')
is.na(str_extract(dir('./'), '.\\.*.csv'))
?manhattan
install.packages('xbreed')
genome<-data.frame(matrix(NA, nrow=1, ncol=6))
names(genome)<-c("chr","len","nmrk","mpos","nqtl","qpos")
genome$chr<-c(1)
genome$len<-c(100)
genome$nmrk<-c(100)
genome$mpos<-c("rnd")
genome$nqtl<-c(50)
genome$qpos<-c("even")
genome
hp<-make_hp(hpsize=100,
ng=10,h2=0.3,phen_var=1 ,genome=genome,
mutr=2.5e-4)
# Mean r2
mat<-hp$hp_mrk[,-1]
rLD<-calc_LD(mat=mat,MAF=0.1,method='adjacent',LD_summary=TRUE)
# LD decay
linkage_map<-hp$linkage_map_mrk[,3]
library(xbreed)
genome<-data.frame(matrix(NA, nrow=1, ncol=6))
names(genome)<-c("chr","len","nmrk","mpos","nqtl","qpos")
genome$chr<-c(1)
genome$len<-c(100)
genome$nmrk<-c(100)
genome$mpos<-c("rnd")
genome$nqtl<-c(50)
genome$qpos<-c("even")
genome
hp<-make_hp(hpsize=100,
ng=10,h2=0.3,phen_var=1 ,genome=genome,
mutr=2.5e-4)
# Mean r2
mat<-hp$hp_mrk[,-1]
rLD<-calc_LD(mat=mat,MAF=0.1,method='adjacent',LD_summary=TRUE)
# LD decay
linkage_map<-hp$linkage_map_mrk[,3]
rLD<-calc_LD(mat=mat,MAF=0.1,method='pairwise'
,LD_summary=TRUE,linkage_map=linkage_map,interval=5)
rLD$ld_decay
View(mat)
# install and load ggplot2
install.packages("ggplot2")
library(ggplot2)
# import the data
ld <- read.table("plink.ld", sep="\t",header=T)
# plot the average correlation for each snp distance
ggplot(ld) +
geom_line(aes(x=BP_B - BP_A, y = R2))
